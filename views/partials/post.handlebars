{{! Partial for a single post }}
<div id = "post-{{id}}" class="post">
    <div class="post-avatar">
        <!-- the user's avatar -->
            <img src="/avatars/{{username}}.png" alt="{{username}}'s avatar" class="avatar">
            <h3>{{title}}</h3>

    </div>

    <div class= "post-content preserve-newlines">
        <!-- the post -->
        <p class = 'content'>{{content}}</p>
        <div id="features">
        <div class="ratingDisplay">
            {{#each (makeStars rating)}}
                <span class="fa fa-star {{this}}"></span>
            {{/each}}
        </div>
        <div class="tagDisplay">
                <p class="tags-container" data-tags="{{tags}}">
                    <!-- Tags will be populated here by JavaScript -->
                </p>
            </div>
        </div>
        <div class="post-status-bar">
            <span class = "interact">
            {{#ifEqual user.username  username}}
                <button class="delete-button" data-id="{{id}}" onclick="handleDeleteClick(event)">
                    <i class="fas fa-trash-alt"></i>
                </button>
            {{else}}
                <button class="like-button" data-id="{{id}}" onclick="handleLikeClick(event)" style="color: {{#userLikedPost likes user.username}}red{{else}}black{{/userLikedPost}};">
                    â™¥
                </button>
            {{/ifEqual}}
            
        <p class = 'liketext' id= 'likes-{{id}}'>{{calculateLikes likes}} <span id = 'likes2'>likes</span></p>
        </span>
        <span class = "postedby">
            <span>Posted by {{username}} on  {{timestamp}}</span>
        </span>        
        </div>
    </div>
</div>
<script>
    document.addEventListener("DOMContentLoaded", function() {
        const posts = document.querySelectorAll(".post");
        posts.forEach(post => {
            const tagsContainer = post.querySelector(".tags-container");
            const tagsString = tagsContainer.getAttribute("data-tags");
            if (tagsString) {
                // Split the tags by commas, trim each tag, and filter out any empty tags
                const tagsArray = tagsString.split(',').map(tag => tag.trim()).filter(tag => tag !== "");
                // Clear any existing content in tagsContainer before appending tags
                tagsContainer.innerHTML = '';
                tagsArray.forEach(tag => {
                    const tagLink = document.createElement("a");
                    tagLink.href = `http://localhost:3000/?order=newest&sortLabel=Newest&gameFilter=${tag}`;
                    tagLink.className = "tag-link";
                    tagLink.textContent = tag;
                    tagsContainer.appendChild(tagLink);
                    tagsContainer.appendChild(document.createTextNode(" ")); // Add space between tags
                });
            } else {
                tagsContainer.textContent = "No tags available";
            }
        });
    });
   async function handleLikeClick(event) {
    const postId = event.target.getAttribute('data-id');
    const likeButton = event.target.closest('.like-button');
    const isLiked = likeButton.style.color === 'red';

    try {
        const response = await fetch(`/like/${postId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        if (response.ok) {
            const likes = document.getElementById(`likes-${postId}`);
            const currentLikes = parseInt(likes.textContent.split(' ')[0], 10);

            if (isLiked) {
                likes.textContent = `${currentLikes - 1} likes`;
                likeButton.style.color = 'black';
            } else {
                likes.textContent = `${currentLikes + 1} likes`;
                likeButton.style.color = 'red';
            }
        } else {
            console.log("Failed to update like");
        }
    } catch (error) {
        console.error('Error liking the post:', error);
    }
}

    async function handleDeleteClick(event) {
        const buttonElement = event.target.closest('.delete-button');
        const postId = buttonElement.getAttribute('data-id');    
    
        try {
            const response = await fetch(`/delete/${postId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (response.ok) {
                const post = document.getElementById(`post-${postId}`);
                if(post) {
                    post.remove();
                }
            }        
        }
        catch (error) {
            console.error('Error deleting the post:', error);
        }       
        
    }    

    // Event listeners to display placeholder text on post form
    document.getElementById('title').addEventListener('input', function() {
        if (this.value === '') {
            this.classList.add('placeholder');
        } else {
            this.classList.remove('placeholder');
        }
    });

    document.getElementById('content').addEventListener('input', function() {
        if (this.value === '') {
            this.classList.add('placeholder');
        } else {
            this.classList.remove('placeholder');
        }
    });
</script>