{{! Partial for a single post }}
<div id = "post-{{id}}" class="post">
    <div class="post-avatar">
        <!-- the user's avatar -->
            <img src="/avatars/{{username}}.png" alt="{{username}}'s avatar" class="avatar">
            <h3>{{title}}</h3>

    </div>
    <div class= "post-content preserve-newlines">
        <!-- the post -->
        <p class = 'content'>{{content}}</p>
        <div class="post-status-bar">
            <span class = "interact">
            {{#ifEqual user.username  username}}
                <button class="delete-button" data-id="{{id}}" onclick="handleDeleteClick(event)">
                    <i class="fas fa-trash-alt"></i>
                </button>
            {{else}}
                <button class="like-button" data-id="{{id}}" onclick="handleLikeClick(event)" style="color: {{#userLikedPost likes user.username}}red{{else}}black{{/userLikedPost}};">
                    â™¥
                </button>
            {{/ifEqual}}
            
        <p class = 'liketext' id= 'likes-{{id}}'>{{calculateLikes likes}} <span id = 'likes2'>likes</span></p>
        {{!-- DIFFERENCE: <p class = 'liketext' id= 'likes-{{id}}'>{{likes.length}} <span id = 'likes2'>likes</span></p> --}}
        </span>
        <span class = "postedby">
            <span>Posted by {{username}} on  {{timestamp}}</span>
        </span>        
        </div>
    </div>
</div>
<script>

   async function handleLikeClick(event) {
    const postId = event.target.getAttribute('data-id');
    const likeButton = event.target.closest('.like-button');
    const isLiked = likeButton.style.color === 'red';

    try {
        const response = await fetch(`/like/${postId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        if (response.ok) {
            const likes = document.getElementById(`likes-${postId}`);
            const currentLikes = parseInt(likes.textContent.split(' ')[0], 10);

            if (isLiked) {
                likes.textContent = `${currentLikes - 1} likes`;
                likeButton.style.color = 'black';
            } else {
                likes.textContent = `${currentLikes + 1} likes`;
                likeButton.style.color = 'red';
            }

            /* DIFFERENCE: likes.textContent = `${isLiked ? currentLikes - 1 : currentLikes + 1} likes`;
                        likeButton.style.color = isLiked ? '' : 'red'; */
        } else {
            console.log("Failed to update like");
        }
    } catch (error) {
        console.error('Error liking the post:', error);
    }
}

    async function handleDeleteClick(event) {
        const buttonElement = event.target.closest('.delete-button');
        const postId = buttonElement.getAttribute('data-id');    
    
        try {
            const response = await fetch(`/delete/${postId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (response.ok) {
                const post = document.getElementById(`post-${postId}`);
                if(post) {
                    post.remove();
                }
            }        
        }
        catch (error) {
            console.error('Error deleting the post:', error);
        }       
        
    }    

    // Event listeners to display placeholder text on post form
    document.getElementById('title').addEventListener('input', function() {
        if (this.value === '') {
            this.classList.add('placeholder');
        } else {
            this.classList.remove('placeholder');
        }
    });

    document.getElementById('content').addEventListener('input', function() {
        if (this.value === '') {
            this.classList.add('placeholder');
        } else {
            this.classList.remove('placeholder');
        }
    });
</script>