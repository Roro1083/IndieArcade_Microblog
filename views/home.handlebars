{{! Use the main layout }}
{{!< main }}

{{! New Post Submission Form }}
<section class="content-container">
    {{#if loggedIn}}
        <!-- show the create post form when logged in -->
        <section class="post-form">
            <form action="/posts" method="POST">
                <input type="text" id="title" name="title" placeholder="Title" required><br><br>
                <textarea id="content" name="content" placeholder="What's the vibe, gamer?" required></textarea><br><br>

                <!-- Star rating system -->
                    <span id="ratingText">Game rating: </span>
                    <div class="ratingStars">
                        <span class="star" id="star-5">‚òÖ</span>
                        <span class="star" id="star-4">‚òÖ</span>
                        <span class="star" id="star-3">‚òÖ</span>
                        <span class="star" id="star-2">‚òÖ</span>
                        <span class="star" id="star-1">‚òÖ</span>
                    </div>

                    <input type="hidden" id="rating" name="rating" value="0">

                <div class="form-actions">
                    <button type="button" class="emoji-button" onclick="toggleEmojiPanel()">üòÄ</button>
                    <button type="submit" class="post-button">Post</button>


                </div>
            </form>

            <div id="emoji-container" class="emoji-panel" style="display: none;">
                <!-- input field for the emoji search -->
                <input type="text" id="emoji-search" oninput="searchEmojis()" placeholder="Search emojis...">
                <div id = "emoji-grid"></div>
            </div>
        </section>
    {{/if}}

    <!-- container holding sorting button and list of posts -->
    <div class="postsContainer">
        <form id="sortByForm" method="get" action="/">
            <div class="dropdown" id="dropdown">
                <button type="button" class="dropdownButton" id="sortButton">Sort By: {{sortLabel}}</button>
                <div class="dropdownOptions" id="dropdownOptions">
                    <a href="#" onclick="setSortOption('newest', 'Newest')">Newest</a>
                    <a href="#" onclick="setSortOption('oldest', 'Oldest')">Oldest</a>
                    <a href="#" onclick="setSortOption('mostLikes', 'Most Likes')">Most Likes</a>
                </div>
            </div>
            <input type="hidden" name="order" id="sortOrder" value="{{order}}">
            <input type="hidden" name="sortLabel" id="sortLabel" value="{{sortLabel}}">

            <input type="text" name="gameFilter" id="gameFilter" placeholder="Search by tag">
            <button id="search" type="submit">üîç</button>
        </form>

        

        <section class="posts-list">
            <!-- recent posts -->
            {{#if posts.length}}
            <ul>
                {{#each posts}}
                    <!-- pass the user in to posts and this is the syntax -->
                    {{> post this user=../user}}            
                {{/each}}
            </ul>
            {{else}}
                <!-- no posts, oh no, what now? -->
                <p>No Posts Yet. &#40;:&#41;</p>
            {{/if}}
        </section>
    </div>
</section>


    {{! JavaScript for Emoji Integration }}
    <script>
        let allEmojis = [];  // Global list to hold all emojis

        async function toggleEmojiPanel() {
            const container = document.getElementById('emoji-container');
            container.style.display = container.style.display === 'none' ? 'block' : 'none';


            if(container.style.display === 'block' && allEmojis.length == 0){
                const apiKey = "%EMOJI%";
                try {
                    // Fetching emojis
                    const response = await fetch(`/emojis`);
                    if (response.ok) {
                        allEmojis = await response.json();

                        // Show off emojis
                        displayEmojis(allEmojis);
                    }
                    else {
                        console.log('failed to get emojis');
                    }
                } catch (error) {
                    console.error("Error fetching emojis:", error);
                }
            }
        }

        function displayEmojis(emojis,limit=200) {
            const container = document.getElementById('emoji-grid');
            container.innerHTML = '';  // Clear previous results
            if (Array.isArray(emojis) && emojis.length > 0) {
                emojis.slice(0, limit).forEach(emoji => {
                    const emojiElement = document.createElement('span');
                    emojiElement.textContent = emoji.character;
                    emojiElement.title = emoji.slug;  // Showing the emoji name on hover
                    emojiElement.style.cursor = 'pointer';
                    emojiElement.onclick = () => insertEmoji(emoji.character);
                    container.appendChild(emojiElement);
                });
            } else {
                container.textContent = 'No emojis found. Try a different search!';
            }
        }

        function searchEmojis() {
            const searchTerm = document.getElementById('emoji-search').value.toLowerCase();
            const filteredEmojis = allEmojis.filter((emoji) => emoji.slug.includes(searchTerm));
            
            displayEmojis(filteredEmojis);
        }

        function insertEmoji(emoji) {
            // Put emoji on the form 
            const form = document.getElementById('content');
            const start = form.selectionStart;
            const end = form.selectionEnd;
            const text = form.value;

            const before = text.substring(0, start);
            const after = text.substring(end, text.length);

            form.value = before + emoji + after;
            form.selectionStart = form.selectionEnd = start + emoji.length;

            form.focus();  // Keep focus on the textarea
        }
    </script>
</div>

{{! JavaScript for Rating Functionality }}
<script>

// Event listener for document to retrieve rating
document.addEventListener('DOMContentLoaded', function() {
    const stars = document.querySelectorAll('.star');
    const userRating = document.getElementById('rating');
    const ratingDisplay = document.getElementById('ratingText');

    stars.forEach(star => {
        // Highlights stars on mouseover
        star.addEventListener('mouseover', function() {
            const rateValue = this.id.split('-')[1];
            highlightStars(rateValue);
        });

        // Resets stars when mouse is not hovering
        star.addEventListener('mouseout', function() {
            highlightStars(userRating.value);
        });

        // Sets the rating when a star is clicked
        star.addEventListener('click', function() {
            const rateValue = this.id.split('-')[1];
            userRating.value = rateValue;
            updateStars(rateValue);
        });
    });

    function highlightStars(value) {
        stars.forEach(star => {
            if (star.id.split('-')[1] <= value) {
                star.style.color = 'gold';
            } else {
                star.style.color = 'gray';
            }
        });
    }

    function updateStars(value) {
        highlightStars(value);
        ratingDisplay.textContent = 'Game rating: ' + value;
    }
});

</script>

{{! JavaScript for Sort-By Functionality }}
<script>
    // Shows dropdown when user clicks on Sort By button
    document.getElementById('sortButton').addEventListener('click', function() {
        document.getElementById('dropdownOptions').classList.toggle('show');
        setDropdownWidth();
    });

    // Closes dropdown when user clicks outside of it
    document.addEventListener('click', function(e) {
        if (!document.getElementById('dropdown').contains(e.target)) {
            document.getElementById('dropdownOptions').classList.remove('show');
        }
    });

    // Sets selected sorting option
    function setSortOption(option, label) {
        document.getElementById('sortOrder').value = option;
        document.getElementById('sortLabel').value = label;
        document.getElementById('sortByForm').submit();
        localStorage.setItem('postOrder', option);
    }

    function getSortOption() {
        const order = localStorage.getItem('postOrder');
        const label = localStorage.getItem('sortLabel');
        if (order && label) { 
            setSortOption(order, label);
        }
    }

    // Event listener for document load to retrieve stored sort option
    document.addEventListener('DOMContentLoaded', function() {
        getSortOption();
    });

</script>